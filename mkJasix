#!/bin/bash

##
# @file mkJasix
# @author Jas Eckard <jas@eckard.com>
#
# @section LICENSE
#
# (GPL license?)
#
# @section DESCRIPTION
#
# Script to automate the build of Jasix

# Return codes:  1 = bad parameter(s)
#                2 = required parameter missing
#                3 = network issue

. ansicolors

declare rc=0

Usage()
{
        cat 1>&2 <<EOFUsage

Usage:  $0 [OPTION]... REQUIRED [OPTIONAL]

  -a, --optionA         Description
  -b, --optionB VAL     Desc that takes VAL
  -h, -?, --help        Display this help and exit

EOFUsage
        exit ${rc}
}  # Usage()

parseOptions()
{
        local shortopts="h?" ; local longopts="help,"

        ARGS=$(getopt -o "${shortopts}" -l "${longopts}" -n "getopt.sh" -- "$@")

        getoptRc=$?
        if [[ 0 -ne "${getoptRc}" ]]; then
                echoStderr "ERROR:  getopt called incorrectly, rc=${getoptRc}"
                rc=1
                exit ${rc}
                # Alternatively, ($rc gets passed):
                #Usage
        fi

        eval set -- "${ARGS}"

        if [[ 0 != ${rc} ]]; then
                Usage
        fi
}  # parseOptions()

verifyParams()
{
        :
}  # verifyParams()

introBanner()
{
        boldgreen "=== Building Jasix ==="
}  # introBanner()

gitLatest()
{
        if [[ -d jasix/.git ]]; then
                pushd jasix
                git pull
                rc=$?
        else
                git clone https://github.com/chruck/jasix.git
                rc=$?
                pushd jasix
        fi

        if [[ 0 != ${rc} ]]; then
                rc=3
        fi
}  # gitLatest()

buildEverything()
{
        if [[ 0 != ${rc} ]]; then
                return
        fi

        subdirs="0-before_reboot 1-after_reboot"

        for i in ${subdirs}; do
                if [[ ! -e ${i}/.completed ]]; then
                        pushd ${i}
                        ./build
                        popd
                fi

                green "Stage ${i} completed"
        done
}   # buildEverything()

reportError()
{
        case ${rc} in
                0)
                        return
                        ;;
                1)
                        boldred "Wrong parameters supplied"
                        ;;
                2)
                        boldred "Required parameter missing"
                        ;;
                3)
                        boldred "Network issue"
                        ;;
                *)
                        boldred "Unknown error"
                        ;;
        esac
}

endBanner()
{
        popd
        yellow "=== Finished building Jasix ==="
}  # endBanner()

parseOptions "$@"
verifyParams
introBanner
gitLatest
buildEverything
reportError
endBanner
