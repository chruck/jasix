#!/bin/bash

set -e

##
# @file preBootstrapDebGentooKvm
# @author Jas Eckard <jas+jasix@eckard.com>
#
# @section LICENSE
#
# GPLv3
#
# @section DESCRIPTION
#
# This file is used to download Gentoo "Minimal Install CD" ISO, then
# boot a KVM image into it

# Return codes:  1 = bad parameter(s)
#                2 = required parameter missing
#                3 = required program missing

readonly localDir="$(cd ${BASH_SOURCE[0]%/*} && pwd -P && cd - >/dev/null)"

# To get some debug output call this file like:
# DEBUG=true ./preBootstrapDebGentooKvm.sh ...

echoStderr() { echo "$@" 1>&2; }

if [[ 'x' == "x${DEBUG}" ]]; then
        # Make `debug' a no-op
        debug() { :; }
else
        debug() {
                echoStderr -n "DEBUG ${BASH_LINENO[*]}:  "
                echoStderr "$@"
        }
fi

declare rc=0

. ansicolors 

Usage()
{
        cat 1>&2 <<EOFUsage

Usage:  $0 [OPTION]... REQUIRED [OPTIONAL]

  -h, -?, --help        Display this help and exit

EOFUsage
        exit ${rc}
}  # Usage()

parseOptions()
{
        debug "Original args:  $@"

        local shortopts="h?" ; local longopts="help,"

        debug "shortopts=${shortopts} longopts=${longopts}"

        ARGS=$(getopt -o "${shortopts}" -l "${longopts}" -n "getopt.sh" -- "$@")

        getoptRc=$?
        if [[ 0 -ne "${getoptRc}" ]]; then
                echoStderr "ERROR:  getopt called incorrectly, rc=${getoptRc}"
                rc=1
                exit ${rc}
                # Alternatively, ($rc gets passed):
                #Usage
        fi

        eval set -- "${ARGS}"

        while true; do
                param=$1
                case "${param}" in
                        -h|-\?|--help)
                                debug "Asked for help"
                                Usage
                                ;;
                        --)
                                shift;
                                break;
                                ;;
                        *)
                                echoStderr "ERROR:  Unimplemented option: ${param}"
                                break;
                                ;;
                esac
        done

        debug "New args:  $@"

        if [[ 0 != ${rc} ]]; then
                Usage
        fi
}  # parseOptions()

# TODO:  Verify the parameters passed are valid
verifyParams()
{
        :
}  # verifyParams()

banner()
{
        boldwhite "--- ${BOLDYELLOW} Jasix ${BOLDWHITE} ---"
        boldwhite "Linux distribution scripted and customized by me, Jas"
        echo
}  # banner()

download()
{
        local url="$@"

        green "Downloading ${url}"

        if ! wget "${url}"; then
                local file=$(echo ${url} |rev |cut -d/ -f1 |rev)

                rm -f ${file}*
                sleep 1
                download "${url}"
        fi

}  # download()

dlInfoFiles()
{
        readonly min="install-amd64-minimal"
        readonly latestfile="latest-${min}.txt"
        readonly urlparent="http://distfiles.gentoo.org/releases/amd64/autobuilds"

        green "Checking if download of latest Gentoo Minimal Install CD necessary"
        rm -f ${latestfile}*
        download "${urlparent}/${latestfile}"

        local info="$(grep ${min} ${latestfile})"
        local ver="$(echo ${info} |cut -f1 -d/)"
        local chk="$(echo ${info} |cut -f2 -d\ )"
        readonly isofile="${min}-${ver}.iso"
        readonly digestsfile="${isofile}.DIGESTS"
        readonly urlcurrent="${urlparent}/current-${min}"

        rm -f ${digestsfile}*
        download "${urlcurrent}/${digestsfile}"
}  # dlInfoFiles()

verifyIso()
{
        if head -n2 ${digestsfile} |sha512sum -c; then
                return 0
        fi

        return 1
}  # verifyIso()

dlGentoo()
{
        if [[ -f "${isofile}" ]]; then
                yellow "Gentoo DVD iso found."
                if verifyIso; then
                        return
                fi

                rm -f ${isofile}
        fi

        green "Downloading Gentoo Minimal Install CD"
        download "${urlcurrent}/${isofile}"

        dlGentoo
}  # dlGentoo()

startKvm()
{
        local KVM="$(type -p kvm)"

        if [[ ! -e "${KVM}" ]]; then
                red "Cannot find KVM in your \$PATH"
                exit 3
        fi

        dd if=/dev/zero of=jasix.hda bs=1G count=1

        green "Starting KVM:"
        boldgreen "Once the VM boots, at the ${BOLDWHITE}boot:${BOLDGREEN} prompt type ${BOLDWHITE}gentoo${BOLDGREEN} or ${BOLDWHITE}gentoo-nofb"
        boldred "Once the VM is booted execute (optional in parentheses):"
        boldwhite "- (passwd)"
        boldwhite "- (/etc/init.d/sshd start)"
        boldwhite "- (ssh -R 2222:localhost:22 ${RED}someusername${BOLDWHITE}@\$(route |awk 'default {print \$2}') )"
        boldwhite "- (From the host:  ssh root@localhost -p 2222)"
        boldwhite "- wget -O - https://raw.githubusercontent.com/chruck/jasix/master/mkJasix | sh"
        kvm -m 1G -smp 2 -cdrom ${isofile} -hda jasix.hda
}  # startKvm()

parseOptions "$@"
verifyParams
banner
dlInfoFiles
dlGentoo
startKvm
